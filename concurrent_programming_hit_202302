The pooly Multithreading Library in Java



PLEASE NOTE THAT DURING THE MEETINGS TILL THE END OF THE SEMESTER CHANGES MIGHT BE INTRODUCED INTO THIS DOCUMENT. THEREFORE, MAKE SURE THAT YOUR PROJECT MEETS THE REQUIREMENTS OF THIS DOCUMENT BY THE END OF THIS SEMESTER


QUESTIONS REGARDING THE INTERPRETATION OF THIS DOCUMENT SHOULD BE POSTED IN THE COURSE FORUM. MAKE SURE TO FOLLOW THIS FORUM TO VERIFY THAT YOUR INTERPRETATION IS THE ACCURATE ONE.



Introduction


The final project includes the development of the imaginary pooly multithreading library (in Java). This library should include the definition of the ThreadsPool class, which assists us with the use of multiple threads packed and managed together as a pool of threads. The library should be packed in a single JAR file, and its name should be pooly.jar.



The il.ac.hit.pooly Package


The classes and the interfaces pooly includes should be packed in a package, that its name is il.ac.hit.pooly. This package should include (at the minimum) the class ThreadsPool, and the interface Task.



The il.ac.hit.pooly.Task interface


This interface should include (at the minimum) the definition of the abstract methods listed in the following code snippet:

public interface Task {
        public abstract void perform();
        public abstract void setPriority(int level);
        public abstract void getPriority();
}




The il.ac.hit.pooly.ThreadsPool class


This class should include a constructor (with a single parameter) that allows specifying the number of Thread objects the pool will manage, and a method that its name is submit for submitting a Task object to be handheld by the ThreadsPool object.

…
public void submit(Task task) {
        …
}
…


The ThreadsPool object should perform the submitted tasks in accordance with the priority each and every task has. The priority level is not limited to specific values, and it can be any integer we choose (The higher the priority is the task is more important). When the ThreadsPool threads are occupied with performing tasks and a new task is added, the tasks that are currently handheld won’t be interrupted (won’t be taken away just to allow a top priority task to be immediately handheld).



Unit Tests


The project should include unit tests developed with JUnit using the existing wizards in IntelliJ. You can find a video that explains how to develop unit tests with JUnit at https://youtu.be/hYg0Y1hMEus.  



Code Style


The code in Java should follow the style guide at https://tinyurl.com/javapoints. If you have questions regarding this style guide please post them in the course forum.



Submission Guidelines


Hereto are the guidelines for submitting this project. You should carefully follow these guidelines. If a question arises, you should post it to the course forum to get a detailed, accurate answer. Points will be deduced when the submission doesn’t meet the following guidelines (e.g. if the submitted PDF is not properly organized to allow code review points will be deduced).


0. You should develop the project with the IntelliJ IDE. It can be the ultimate version or the community one. Both of them are OK.

1. You should create a short video (try to make it up to 60s… if you want a longer video then make a longer video) that shows how the project runs. You should upload that video on youtube and make sure you upload it as an unlisted video. If you want, it is perfectly OK to create a video without sound.

2. You should pack the entire project into a ZIP file (You should choose in your IntelliJ IDE File->Export->Project to Zip file), and together with the JAR file and the PDF file, you should upload these 3 files to the submission box (it will be opened on Moodle). The names of the ZIP and the PDF files should include the first name and the last name of the development team manager (in English). The names of the files you submit cannot include spaces, and cannot include special characters. They should include English letters only. You can use underscore as a replacement for a simple space.


3. You should create a PDF file (one single PDF file!!!) and copy to that file all code files that were coded by you. Make sure that lines are not broken. Make sure the alignment is to the left. Make sure this PDF file is properly organized to allow the code review.


4. The PDF file should include (at the beginning of it) the following:

a. The first name and the last name of the development team manager.
b. First name + Last name + ID + Mobile Number + Email Address of each one of the team members.

c. Link to the video you created (item 1). The link should be clickable.


5. The team manager should submit the three files (ZIP+JAR+PDF) in the assignment box that will be opened in our course on moodle (Only The Team Manager Should Submit The Project!!!! The Other Students Don’t Need To Submit!). Please note the time difference between the time on the server (on which Moodle is running) and the time on your end. Due to this difference, you should treat the deadline published on our moodle website as if it was 30min earlier. Late submissions won’t be accepted. Submissions of projects developed by a single student won’t be accepted. It is not possible to get a delay. Teams with justified reasons for getting a delay (in accordance with the college guidelines) will be handheld separately. They won’t submit through the assignment box of this project, and they won’t get their mark together with all others.

6. The deadline for submitting this project is _____.

change 1 - 21.5.2023
The getPriority method was added to the Task interface
